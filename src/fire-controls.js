/**
 * Fire Controls - Î∂à Ìö®Í≥º ÌååÎùºÎØ∏ÌÑ∞ Ï°∞Ï†ïÏùÑ ÏúÑÌïú Î™®Îçò ÏÇ¨Ïù¥ÎìúÎ∞î Ïª®Ìä∏Î°§ Ìå®ÎÑê
 */

class FireControls {
    constructor() {
        this.fire = null;
        this.rotationSpeed = 0;
        
        // Í∏∞Î≥∏Í∞í
        this.defaultValues = {
            scale: 0.9,
            positionX: 0,
            positionY: -160,
            nightSky: true,
            backgroundImage: true,
            magnitude: 1.6,
            lacunarity: 2.0,
            gain: 0.5,
            baseWidth: 0.1,
            noiseScaleX: 1,
            noiseScaleY: 2,
            noiseScaleZ: 1,
            colorR: 255,
            colorG: 142,
            colorB: 211,
            fireIntensity: 1.0,
            fireScale: 1.1,
            animationSpeed: 1.0,
            toonSteps: 2.0,
            toonBrightness: 0.9,
            opacity: 0.7,
            soundVolume: 0.5,
            soundEnabled: true,
            embersEnabled: true,
            smokeEnabled: true,
            smokeIntensity: 0.2,
            glowEnabled: true,
            glowRange: 1.3,
            glowAlpha: 0.2,
            imageLayer: true
        };
        
        // ÌòÑÏû¨ ÏÑ§Ï†ïÍ∞í
        this.currentValues = { ...this.defaultValues };
        
        this.init();
    }

    init() {
        // Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ ÏßÄÏõê Ïó¨Î∂Ä ÌôïÏù∏
        if (typeof(Storage) === "undefined") {
            console.warn('‚ö†Ô∏è Ïù¥ Î∏åÎùºÏö∞Ï†ÄÎäî Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÎ•º ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§.');
        } else {
            console.log('‚úÖ Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ ÏßÄÏõêÎê®');
            // Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ Ï†ëÍ∑º ÌÖåÏä§Ìä∏
            try {
                localStorage.setItem('test', 'test');
                localStorage.removeItem('test');
                console.log('‚úÖ Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ Ï†ëÍ∑º Í∞ÄÎä•');
            } catch (e) {
                console.warn('‚ö†Ô∏è Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ Ï†ëÍ∑º Î∂àÍ∞Ä:', e);
            }
        }
        
        this.loadSettings();
        this.createModernUI();
        this.setupEventListeners();
    }

    // Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú ÏÑ§Ï†ï Î∂àÎü¨Ïò§Í∏∞
    loadSettings() {
        console.log('üîÑ ÏÑ§Ï†ï Î∂àÎü¨Ïò§Í∏∞...');
        try {
            const saved = localStorage.getItem('fireSettings');
            if (saved) {
                const settings = JSON.parse(saved);
                this.currentValues = { ...this.defaultValues, ...settings };
                console.log('‚úÖ Ï†ÄÏû•Îêú ÏÑ§Ï†ï Î≥µÏõê ÏôÑÎ£å');
            } else {
                console.log('‚ÑπÔ∏è Ï†ÄÏû•Îêú ÏÑ§Ï†ïÏù¥ ÏóÜÏùå, Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©');
            }
        } catch (e) {
            console.log('‚ùå ÏÑ§Ï†ï Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:', e);
        }
    }

    // Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóê ÏÑ§Ï†ï Ï†ÄÏû•
    saveSettings() {
        try {
            const settingsJson = JSON.stringify(this.currentValues);
            localStorage.setItem('fireSettings', settingsJson);
            console.log('üíæ ÏÑ§Ï†ï Ï†ÄÏû• ÏôÑÎ£å');
        } catch (e) {
            console.log('‚ùå ÏÑ§Ï†ï Ï†ÄÏû• Ïã§Ìå®:', e);
        }
    }

    createModernUI() {
        // Í∏∞Ï°¥ UI Ï†úÍ±∞
        const oldControls = document.getElementById('controls');
        const oldToggle = document.getElementById('toggle-controls');
        if (oldControls) oldControls.remove();
        if (oldToggle) oldToggle.remove();

        // Î™®Îçò ÏÑ§Ï†ï Î≤ÑÌäº ÏÉùÏÑ±
        this.createSettingsButton();
        
        // Î™®Îçò ÏÇ¨Ïù¥ÎìúÎ∞î ÏÉùÏÑ±
        this.createSidebar();
        
        // Î™®Îì† Ïä¨ÎùºÏù¥ÎçîÎ•º containerÎ°ú Í∞êÏã∏Í∏∞
        setTimeout(() => this.wrapSlidersWithContainers(), 100);
        
        // UI Í∞í ÎèôÍ∏∞Ìôî (ÏÇ¨Ïù¥ÎìúÎ∞î ÏÉùÏÑ± ÌõÑ)
        setTimeout(() => {
            this.updateAllDisplayValues();
            console.log('üîÑ UI Í∞í ÎèôÍ∏∞Ìôî ÏôÑÎ£å');
        }, 150);
    }

    createSettingsButton() {
        const settingsBtn = document.createElement('button');
        settingsBtn.id = 'settingsBtn';
        settingsBtn.innerHTML = '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>';
        
        Object.assign(settingsBtn.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            width: '44px',
            height: '44px',
            padding: '0',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            borderRadius: '50%',
            backgroundColor: 'rgba(0, 0, 0, 0.6)',
            color: '#fff',
            border: 'none',
            cursor: 'pointer',
            zIndex: '100',
            boxShadow: '0 2px 10px rgba(0, 0, 0, 0.2)',
            transition: 'transform 0.3s ease, background-color 0.3s'
        });
        
        // Ìò∏Î≤Ñ Ìö®Í≥º
        settingsBtn.addEventListener('mouseover', () => {
            settingsBtn.style.backgroundColor = 'rgba(50, 50, 50, 0.8)';
            settingsBtn.style.transform = 'scale(1.1)';
        });
        settingsBtn.addEventListener('mouseout', () => {
            settingsBtn.style.backgroundColor = 'rgba(0, 0, 0, 0.6)';
            settingsBtn.style.transform = 'scale(1)';
        });
        
        document.body.appendChild(settingsBtn);
    }

    createSidebar() {
        const sidebar = document.createElement('div');
        sidebar.id = 'settingsSidebar';
        
        Object.assign(sidebar.style, {
            position: 'fixed',
            top: '0',
            right: '-350px',
            width: '300px',
            height: '100%',
            background: 'rgba(20, 20, 20, 0.9)',
            padding: '20px',
            boxShadow: '-2px 0 15px rgba(0, 0, 0, 0.5)',
            transition: 'right 0.3s ease',
            zIndex: '101',
            backdropFilter: 'blur(15px)',
            fontFamily: "'Arial', sans-serif",
            overflowY: 'auto',
            visibility: 'visible',
            display: 'block'
        });

        // ÏÇ¨Ïù¥ÎìúÎ∞î ÎÇ¥Ïö©
        sidebar.innerHTML = `
            <div style="display:flex;align-items:center;justify-content:space-between;margin-bottom:24px;border-bottom:1px solid rgba(255,255,255,0.2);padding-bottom:16px;">
                <h3 style="color:#fff;margin:0;font-size:18px;font-weight:600;">Î∂àÎ©ç ÏÑ§Ï†ï</h3>
                <button id="closeSettings" style="background:none;border:none;color:#fff;cursor:pointer;font-size:24px;padding:0;">&times;</button>
            </div>
            
            <div style="max-height:calc(100vh - 160px);overflow-y:auto;padding-right:5px;">
                <div style="display:flex;flex-direction:column;gap:20px;">
                    
                    <!-- Í∏∞Î≥∏ ÏÑ§Ï†ï -->
                    <div class="setting-section">
                        <h4 style="color:#fff;margin:0 0 16px 0;font-size:16px;font-weight:500;border-bottom:1px solid rgba(255,255,255,0.2);padding-bottom:6px;">Í∏∞Î≥∏ ÏÑ§Ï†ï</h4>
                        
                        <!-- ÌÅ¨Í∏∞ -->
                        <div class="setting-item">
                            <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">ÌÅ¨Í∏∞ (Scale)</label>
                            <div class="slider-container">
                                <input id="scale" type="range" min="0.5" max="5" step="0.05" value="${this.currentValues.scale}" class="modern-slider">
                                <span id="scale-value" class="value-display">${this.currentValues.scale}</span>
                            </div>
                        </div>
                        
                        <!-- Ïï†ÎãàÎ©îÏù¥ÏÖò ÏÜçÎèÑ -->
                        <div class="setting-item">
                            <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">Ïï†ÎãàÎ©îÏù¥ÏÖò ÏÜçÎèÑ</label>
                            <div class="slider-container">
                                <input id="animationSpeed" type="range" min="0.1" max="3" step="0.1" value="${this.currentValues.animationSpeed}" class="modern-slider">
                                <span id="animationSpeed-value" class="value-display">${this.currentValues.animationSpeed}</span>
                            </div>
                        </div>
                        
                        <!-- X ÏúÑÏπò -->
                        <div class="setting-item">
                            <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">X ÏúÑÏπò</label>
                            <div class="slider-container">
                                <input id="positionX" type="range" min="-800" max="800" step="5" value="${this.currentValues.positionX}" class="modern-slider">
                                <span id="positionX-value" class="value-display">${this.currentValues.positionX}</span>
                            </div>
                        </div>
                        
                        <!-- Y ÏúÑÏπò -->
                        <div class="setting-item">
                            <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">Y ÏúÑÏπò</label>
                            <div class="slider-container">
                                <input id="positionY" type="range" min="-300" max="300" step="5" value="${this.currentValues.positionY + 300}" class="modern-slider">
                                <span id="positionY-value" class="value-display">${this.currentValues.positionY + 300}</span>
                            </div>
                        </div>
                        
                        <!-- ÏÜåÎ¶¨ Î≥ºÎ•® (ÌäπÎ≥ÑÌïú Ï≤òÎ¶¨) -->
                        <div class="setting-item">
                            <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">ÏÜåÎ¶¨ Î≥ºÎ•®</label>
                            <div class="slider-container">
                                <input id="soundVolume" type="range" min="0" max="1" step="0.05" value="${this.currentValues.soundVolume}" class="modern-slider">
                                <span id="soundVolume-value" class="value-display mute-toggle" style="cursor:pointer;user-select:none;" title="ÌÅ¥Î¶≠ÌïòÏó¨ ÏùåÏÜåÍ±∞ ÌÜ†Í∏Ä">${this.currentValues.soundVolume.toFixed(2)}</span>
                            </div>
                        </div>
                        
                        <!-- ÌôòÍ≤Ω ÏÑ§Ï†ï -->
                        <div style="margin:16px 0;padding:12px 0;border-top:1px solid rgba(255,255,255,0.1);">
                            <div class="setting-item" style="display:flex;justify-content:space-between;align-items:center;margin-bottom:12px;">
                                <label style="color:#fff;font-size:13px;">Î∞§ÌïòÎäò</label>
                                <label class="toggle-switch">
                                    <input id="nightSky" type="checkbox" ${this.currentValues.nightSky ? 'checked' : ''}>
                                    <span class="toggle-slider"></span>
                                </label>
                            </div>
                            
                            <div class="setting-item" style="display:flex;justify-content:space-between;align-items:center;margin-bottom:12px;">
                                <label style="color:#fff;font-size:13px;">Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ</label>
                                <label class="toggle-switch">
                                    <input id="backgroundImage" type="checkbox" ${this.currentValues.backgroundImage ? 'checked' : ''}>
                                    <span class="toggle-slider"></span>
                                </label>
                            </div>
                            <div class="setting-item" style="display:flex;justify-content:space-between;align-items:center;margin-bottom:12px;">
                                <label style="color:#fff;font-size:13px;">ÏÜåÌíà Ïù¥ÎØ∏ÏßÄ</label>
                                <label class="toggle-switch">
                                    <input id="imageLayer" type="checkbox" ${this.currentValues.imageLayer ? 'checked' : ''}>
                                    <span class="toggle-slider"></span>
                                </label>
                            </div>
                        </div>
                        
                        <!-- Ìö®Í≥º ÏÑ§Ï†ï -->
                        <div style="margin:16px 0;padding:12px 0;border-top:1px solid rgba(255,255,255,0.1);">
                            <div class="setting-item" style="display:flex;justify-content:space-between;align-items:center;margin-bottom:12px;">
                                <label style="color:#fff;font-size:13px;">Î∂àÎò•</label>
                                <label class="toggle-switch">
                                    <input id="embersEnabled" type="checkbox" ${this.currentValues.embersEnabled ? 'checked' : ''}>
                                    <span class="toggle-slider"></span>
                                </label>
                            </div>
                            
                            <div class="setting-item" style="display:flex;justify-content:space-between;align-items:center;margin-bottom:12px;">
                                <label style="color:#fff;font-size:13px;">Ïó∞Í∏∞</label>
                                <label class="toggle-switch">
                                    <input id="smokeEnabled" type="checkbox" ${this.currentValues.smokeEnabled ? 'checked' : ''}>
                                    <span class="toggle-slider"></span>
                                </label>
                            </div>
                            
                            <div class="setting-item" style="display:flex;justify-content:space-between;align-items:center;">
                                <label style="color:#fff;font-size:13px;">ÎπõÎ¨¥Î¶¨</label>
                                <label class="toggle-switch">
                                    <input id="glowEnabled" type="checkbox" ${this.currentValues.glowEnabled ? 'checked' : ''}>
                                    <span class="toggle-slider"></span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Í≥†Í∏â ÏÑ§Ï†ï -->
                    <div class="advanced-settings">
                        <div class="accordion-header" id="advancedToggle" style="display:flex;align-items:center;justify-content:space-between;padding:12px 0;cursor:pointer;border-bottom:1px solid rgba(255,255,255,0.2);margin-bottom:12px;">
                            <h4 style="color:#fff;margin:0;font-size:16px;font-weight:500;">Í≥†Í∏â ÏÑ§Ï†ï</h4>
                            <span id="advancedArrow" style="color:#fff;font-size:16px;display:inline-block;width:1em;text-align:center;font-family:monospace;line-height:1;">+</span>
                        </div>
                        
                        <div id="advancedContent" style="display:none;gap:20px;flex-direction:column;">
                            
                            <!-- Î∂àÍΩÉ ÏÑ∏Î∂Ä Ï°∞Ï†ï -->
                            <div class="setting-subsection">
                                <h5 style="color:#ff6600;margin:0 0 12px 0;font-size:14px;font-weight:500;">Î∂àÍΩÉ ÏÑ∏Î∂Ä Ï°∞Ï†ï</h5>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">Î∂àÍΩÉ ÌÅ¨Í∏∞</label>
                                    <div class="slider-container">
                                        <input id="fireScale" type="range" min="0.8" max="1.1" step="0.005" value="${this.currentValues.fireScale}" class="modern-slider">
                                        <span id="fireScale-value" class="value-display">${this.currentValues.fireScale}</span>
                                    </div>
                                </div>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">Î∂àÍΩÉ Í∞ïÎèÑ</label>
                                    <div class="slider-container">
                                        <input id="magnitude" type="range" min="0.1" max="3" step="0.1" value="${this.currentValues.magnitude}" class="modern-slider">
                                        <span id="magnitude-value" class="value-display">${this.currentValues.magnitude}</span>
                                    </div>
                                </div>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">Lacunarity</label>
                                    <div class="slider-container">
                                        <input id="lacunarity" type="range" min="1" max="4" step="0.1" value="${this.currentValues.lacunarity}" class="modern-slider">
                                        <span id="lacunarity-value" class="value-display">${this.currentValues.lacunarity}</span>
                                    </div>
                                </div>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">Gain</label>
                                    <div class="slider-container">
                                        <input id="gain" type="range" min="0.1" max="1" step="0.05" value="${this.currentValues.gain}" class="modern-slider">
                                        <span id="gain-value" class="value-display">${this.currentValues.gain}</span>
                                    </div>
                                </div>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">ÏïÑÎûòÏ™Ω ÎÑàÎπÑ</label>
                                    <div class="slider-container">
                                        <input id="baseWidth" type="range" min="0.1" max="1" step="0.05" value="${this.currentValues.baseWidth}" class="modern-slider">
                                        <span id="baseWidth-value" class="value-display">${this.currentValues.baseWidth}</span>
                                    </div>
                                </div>
                            </div>

                            <!-- ÎÖ∏Ïù¥Ï¶à Ïä§ÏºÄÏùº -->
                            <div class="setting-subsection">
                                <h5 style="color:#ff6600;margin:0 0 12px 0;font-size:14px;font-weight:500;">ÎÖ∏Ïù¥Ï¶à Ïä§ÏºÄÏùº</h5>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">X Ïä§ÏºÄÏùº</label>
                                    <div class="slider-container">
                                        <input id="noiseScaleX" type="range" min="0.1" max="3" step="0.1" value="${this.currentValues.noiseScaleX}" class="modern-slider">
                                        <span id="noiseScaleX-value" class="value-display">${this.currentValues.noiseScaleX}</span>
                                    </div>
                                </div>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">Y Ïä§ÏºÄÏùº</label>
                                    <div class="slider-container">
                                        <input id="noiseScaleY" type="range" min="0.1" max="5" step="0.1" value="${this.currentValues.noiseScaleY}" class="modern-slider">
                                        <span id="noiseScaleY-value" class="value-display">${this.currentValues.noiseScaleY}</span>
                                    </div>
                                </div>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">Z Ïä§ÏºÄÏùº</label>
                                    <div class="slider-container">
                                        <input id="noiseScaleZ" type="range" min="0.1" max="3" step="0.1" value="${this.currentValues.noiseScaleZ}" class="modern-slider">
                                        <span id="noiseScaleZ-value" class="value-display">${this.currentValues.noiseScaleZ}</span>
                                    </div>
                                </div>
                            </div>

                            <!-- ÏÉâÏÉÅ Ï°∞Ï†ï -->
                            <div class="setting-subsection">
                                <h5 style="color:#ff6600;margin:0 0 12px 0;font-size:14px;font-weight:500;">ÏÉâÏÉÅ Ï°∞Ï†ï</h5>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">Îπ®Í∞ï (Red)</label>
                                    <div class="slider-container">
                                        <input id="colorR" type="range" min="0" max="255" step="1" value="${this.currentValues.colorR}" class="modern-slider">
                                        <span id="colorR-value" class="value-display">${this.currentValues.colorR}</span>
                                    </div>
                                </div>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">Ï¥àÎ°ù (Green)</label>
                                    <div class="slider-container">
                                        <input id="colorG" type="range" min="0" max="255" step="1" value="${this.currentValues.colorG}" class="modern-slider">
                                        <span id="colorG-value" class="value-display">${this.currentValues.colorG}</span>
                                    </div>
                                </div>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">ÌååÎûë (Blue)</label>
                                    <div class="slider-container">
                                        <input id="colorB" type="range" min="0" max="255" step="1" value="${this.currentValues.colorB}" class="modern-slider">
                                        <span id="colorB-value" class="value-display">${this.currentValues.colorB}</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Ïπ¥Ìà∞ Ïä§ÌÉÄÏùº -->
                            <div class="setting-subsection">
                                <h5 style="color:#ff6600;margin:0 0 12px 0;font-size:14px;font-weight:500;">Ïπ¥Ìà∞ Ïä§ÌÉÄÏùº</h5>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">ÏÉâÏÉÅ Îã®Í≥Ñ Ïàò</label>
                                    <div class="slider-container">
                                        <input id="toonSteps" type="range" min="2" max="8" step="1" value="${this.currentValues.toonSteps}" class="modern-slider">
                                        <span id="toonSteps-value" class="value-display">${this.currentValues.toonSteps}</span>
                                    </div>
                                </div>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">Î∞ùÍ∏∞ Í∞ïÌôî</label>
                                    <div class="slider-container">
                                        <input id="toonBrightness" type="range" min="0.5" max="2.0" step="0.1" value="${this.currentValues.toonBrightness}" class="modern-slider">
                                        <span id="toonBrightness-value" class="value-display">${this.currentValues.toonBrightness}</span>
                                    </div>
                                </div>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">Ìà¨Î™ÖÎèÑ</label>
                                    <div class="slider-container">
                                        <input id="opacity" type="range" min="0.0" max="1.0" step="0.05" value="${this.currentValues.opacity}" class="modern-slider">
                                        <span id="opacity-value" class="value-display">${this.currentValues.opacity}</span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Ïó∞Í∏∞ Í∞ïÎèÑ -->
                            <div class="setting-subsection">
                                <h5 style="color:#ff6600;margin:0 0 12px 0;font-size:14px;font-weight:500;">Ïó∞Í∏∞ Ìö®Í≥º</h5>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">Ïó∞Í∏∞ Í∞ïÎèÑ</label>
                                    <div class="slider-container">
                                        <input id="smokeIntensity" type="range" min="0" max="1" step="0.01" value="${this.currentValues.smokeIntensity}" class="modern-slider">
                                        <span id="smokeIntensity-value" class="value-display">${this.currentValues.smokeIntensity}</span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- ÎπõÎ¨¥Î¶¨ Ìö®Í≥º -->
                            <div class="setting-subsection">
                                <h5 style="color:#ff6600;margin:0 0 12px 0;font-size:14px;font-weight:500;">ÎπõÎ¨¥Î¶¨ Ìö®Í≥º</h5>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">ÎπõÎ¨¥Î¶¨ Î≤îÏúÑ</label>
                                    <div class="slider-container">
                                        <input id="glowRange" type="range" min="0.1" max="3" step="0.01" value="${this.currentValues.glowRange}" class="modern-slider">
                                        <span id="glowRange-value" class="value-display">${this.currentValues.glowRange}</span>
                                    </div>
                                </div>
                                
                                <div class="setting-item">
                                    <label style="color:#fff;margin-bottom:6px;display:block;font-size:13px;">ÎπõÎ¨¥Î¶¨ Î∞ùÍ∏∞</label>
                                    <div class="slider-container">
                                        <input id="glowAlpha" type="range" min="0" max="1" step="0.01" value="${this.currentValues.glowAlpha}" class="modern-slider">
                                        <span id="glowAlpha-value" class="value-display">${this.currentValues.glowAlpha}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî Î∞è ÌõÑÏõêÌïòÍ∏∞ Î≤ÑÌäº Ïª®ÌÖåÏù¥ÎÑà -->
                    <div style="margin-top:20px;border-top:1px solid rgba(255,255,255,0.2);padding-top:16px;display:flex;flex-direction:column;gap:10px;">
                        <button id="resetSettings" style="width:100%;box-sizing:border-box;padding:12px;background-color:rgba(255,80,80,0.2);color:rgba(255,80,80,0.9);border:none;border-radius:6px;cursor:pointer;font-weight:500;font-size:14px;transition:all 0.2s;">
                            ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî
                        </button>
                        <a id="bmcButton" href="https://www.buymeacoffee.com/chococo" target="_blank" rel="noopener" style="display:block;width:100%;box-sizing:border-box;padding:12px;background-color:#333;color:#ffffff;border:none;border-radius:6px;cursor:pointer;font-weight:400;font-size:14px;text-decoration:none;transition:all 0.2s;text-align:center;">‚òï ÌõÑÏõêÌïòÍ∏∞ (Buy me a coffee)</a>
                    </div>
                </div>
            </div>
            
            <!-- Î¨∏Ïùò/Î≤ÑÍ∑∏ Ï†úÎ≥¥ Î∞è Í∞úÏù∏Ï†ïÎ≥¥Ï≤òÎ¶¨Î∞©Ïπ® ÎßÅÌÅ¨ -->
            <div style="margin-top:20px;text-align:center;">
                <a href="https://docs.google.com/forms/d/e/1FAIpQLSf131mGyiZ52mHARoaSBV_9UqBsT3KHThLQhV5FT_3hW87zYA/viewform?usp=header" target="_blank" rel="noopener" style="color:rgba(255,255,255,0.7);font-size:12px;text-decoration:none;">Î¨∏Ïùò/Î≤ÑÍ∑∏ Ï†úÎ≥¥</a>
            </div>
            <div style="margin-top:8px;text-align:center;">
                <a href="privacy.html" target="_blank" rel="noopener" style="color:rgba(255,255,255,0.7);font-size:12px;text-decoration:none;">Í∞úÏù∏Ï†ïÎ≥¥Ï≤òÎ¶¨Î∞©Ïπ®</a>
            </div>
        `;
        
        document.body.appendChild(sidebar);
        
        // ÎîîÎ≤ÑÍπÖ: ÏÇ¨Ïù¥ÎìúÎ∞î ÏÉÅÌÉú ÌôïÏù∏
        console.log('ÏÇ¨Ïù¥ÎìúÎ∞î ÏÉùÏÑ±Îê®:', {
            id: sidebar.id,
            right: sidebar.style.right,
            width: sidebar.style.width,
            position: sidebar.style.position
        });
    }

    setupEventListeners() {
        // ÏÑ§Ï†ï Î≤ÑÌäº ÌÅ¥Î¶≠
        document.getElementById('settingsBtn').addEventListener('click', () => {
            this.toggleSidebar();
        });

        // Îã´Í∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠
        document.getElementById('closeSettings').addEventListener('click', () => {
            this.closeSidebar();
        });

        // Í≥†Í∏â ÏÑ§Ï†ï ÏïÑÏΩîÎîîÏñ∏ ÌÜ†Í∏Ä
        document.getElementById('advancedToggle').addEventListener('click', () => {
            const content = document.getElementById('advancedContent');
            const arrow = document.getElementById('advancedArrow');
            
            if (content.style.display === 'none') {
                content.style.display = 'flex';
                arrow.textContent = '-';
            } else {
                content.style.display = 'none';
                arrow.textContent = '+';
            }
        });

        // ÏúàÎèÑÏö∞ Î¶¨ÏÇ¨Ïù¥Ï¶à Ïù¥Î≤§Ìä∏ - Î∞òÏùëÌòï ÏÇ¨Ïù¥ÎìúÎ∞î ÌÅ¨Í∏∞ Ï°∞Ï†ï
        window.addEventListener('resize', () => {
            this.handleResize();
        });

        // Î™®Îì† Ïä¨ÎùºÏù¥ÎçîÏôÄ ÌÜ†Í∏ÄÏóê Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
        this.setupControls();

        // ÏùåÏÜåÍ±∞ ÌÜ†Í∏Ä Í∏∞Îä• (Î≥ºÎ•® Í∞í ÌëúÏãú ÌÅ¥Î¶≠)
        const soundVolumeValue = document.getElementById('soundVolume-value');
        const soundVolumeSlider = document.getElementById('soundVolume');
        if (soundVolumeValue) {
            soundVolumeValue.addEventListener('click', () => {
                if (window.fireApp && window.fireApp.toggleMute) {
                    window.fireApp.toggleMute();
                    
                    // ÏãúÍ∞ÅÏ†Å ÌîºÎìúÎ∞± Ï∂îÍ∞Ä - ÌÅ¨Í∏∞ Î≥ÄÌôî ÏóÜÏù¥ Ïä§ÌÉÄÏùºÎßå Î≥ÄÍ≤Ω
                    const currentVolume = this.currentValues.soundVolume;
                    const isMuted = window.fireApp.isMuted || false;
                    
                    if (isMuted) {
                        soundVolumeValue.textContent = 'OFF';
                        soundVolumeValue.style.color = '#ff6666';
                        soundVolumeValue.style.backgroundColor = 'rgba(255, 102, 102, 0.2)';
                        soundVolumeValue.style.textDecoration = 'none';
                        // Ïä¨ÎùºÏù¥ÎçîÎèÑ ÏùåÏÜåÍ±∞ ÏÉÅÌÉúÎ°ú ÌëúÏãú
                        if (soundVolumeSlider) {
                            soundVolumeSlider.style.opacity = '0.5';
                            soundVolumeSlider.style.filter = 'grayscale(1)';
                        }
                    } else {
                        soundVolumeValue.textContent = currentVolume.toFixed(2);
                        soundVolumeValue.style.color = '#ff6600';
                        soundVolumeValue.style.backgroundColor = 'rgba(255, 102, 0, 0.2)';
                        soundVolumeValue.style.textDecoration = 'none';
                        // Ïä¨ÎùºÏù¥ÎçîÎ•º Ï†ïÏÉÅ ÏÉÅÌÉúÎ°ú Î≥µÏõê
                        if (soundVolumeSlider) {
                            soundVolumeSlider.style.opacity = '1';
                            soundVolumeSlider.style.filter = 'none';
                        }
                    }
                }
            });
        }

        // Î¶¨ÏÖã Î∞è ÌõÑÏõêÌïòÍ∏∞ Î≤ÑÌäº Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä
        const resetBtn = document.getElementById('resetSettings');
        if (resetBtn) {
            resetBtn.addEventListener('click', () => {
                if (confirm('Î™®Îì† ÏÑ§Ï†ïÏùÑ Ï¥àÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                    this.resetToDefaults();
                }
            });
            resetBtn.addEventListener('mouseover', () => {
                resetBtn.style.backgroundColor = 'rgba(255,80,80,0.3)';
                resetBtn.style.color = 'rgba(255,100,100,1)';
            });
            resetBtn.addEventListener('mouseout', () => {
                resetBtn.style.backgroundColor = 'rgba(255,80,80,0.2)';
                resetBtn.style.color = 'rgba(255,80,80,0.9)';
            });
        }
        const bmcBtn = document.getElementById('bmcButton');
        if (bmcBtn) {
            bmcBtn.addEventListener('mouseover', () => {
                bmcBtn.style.backgroundColor = '#444';
            });
            bmcBtn.addEventListener('mouseout', () => {
                bmcBtn.style.backgroundColor = '#333';
            });
        }
    }

    setupControls() {
        if (!this.fire) return;

        // Í∏∞Î≥∏ ÏÑ§Ï†ï Ïª®Ìä∏Î°§
        this.setupSlider('scale', (value) => {
            // Ïπ¥Î©îÎùº FOV Ï°∞Ï†àÎ°ú ÌôïÎåÄ/Ï∂ïÏÜå Ìö®Í≥º (Î∏åÎùºÏö∞Ï†Ä Ï§åÍ≥º Í∞ôÏùÄ Ìö®Í≥º)
            if (window.fireApp && window.fireApp.camera) {
                const baseFOV = 75; // Í∏∞Î≥∏ FOV
                const newFOV = baseFOV / value; // scaleÏù¥ ÌÅ¥ÏàòÎ°ù FOV ÏûëÏïÑÏßê (ÌôïÎåÄ)
                window.fireApp.camera.fov = newFOV;
                window.fireApp.camera.updateProjectionMatrix();
            }
            this.currentValues.scale = value;
            this.saveSettings();
        });

        this.setupSlider('animationSpeed', (value) => {
            // Ïï†ÎãàÎ©îÏù¥ÏÖò ÏÜçÎèÑÎ°ú Î∂àÍΩÉÏùò ÏõÄÏßÅÏûÑÏùÑ Ï°∞Ï†à
            this.fire.material.uniforms.noiseScale.value.w = value;
            this.currentValues.animationSpeed = value;
            this.saveSettings();
        });

        // ÏúÑÏπò Ï°∞Ï†ï Ïª®Ìä∏Î°§ (CSS transformÏúºÎ°ú Ï∫îÎ≤ÑÏä§ Ï†ÑÏ≤¥ Ïù¥Îèô)
        this.setupSlider('positionX', (value) => {
            this.currentValues.positionX = value;
            this.updateCanvasPosition(value, this.currentValues.positionY);
            this.saveSettings();
        });

        this.setupSlider('positionY', (value) => {
            // slider Í∞í(value)ÏùÑ Ïã§Ï†ú positionYÎ°ú Î≥ÄÌôò (value - 300)
            const actualY = value - 300;
            this.currentValues.positionY = actualY;
            this.updateCanvasPosition(this.currentValues.positionX, actualY);
            this.saveSettings();
        });

        // Î∞§ÌïòÎäò ÌÜ†Í∏Ä Ïª®Ìä∏Î°§
        this.setupToggle('nightSky', (enabled) => {
            if (window.fireApp && window.fireApp.toggleNightSky) {
                window.fireApp.toggleNightSky(enabled);
            }
            this.currentValues.nightSky = enabled;
            this.saveSettings();
        });

        // Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ ÌÜ†Í∏Ä Ïª®Ìä∏Î°§
        this.setupToggle('backgroundImage', (enabled) => {
            if (window.fireApp && window.fireApp.toggleBackgroundImage) {
                window.fireApp.toggleBackgroundImage(enabled);
            }
            this.currentValues.backgroundImage = enabled;
            this.saveSettings();
        });

        // ÏÜåÌíà Ïù¥ÎØ∏ÏßÄ ÌÜ†Í∏Ä Ïª®Ìä∏Î°§
        this.setupToggle('imageLayer', (enabled) => {
            if (window.fireApp && window.fireApp.toggleImageLayer) {
                window.fireApp.toggleImageLayer(enabled);
            }
            this.currentValues.imageLayer = enabled;
            this.saveSettings();
        });

        // Î∂à Î™®Ïñë Ï°∞Ï†ï Ïª®Ìä∏Î°§
        this.setupSlider('fireScale', (value) => {
            if (this.fire) {
                this.fire.scale.set(value, value, value);
            }
            this.currentValues.fireScale = value;
            // Glow ÌÅ¨Í∏∞ÎèÑ Î™®Îã•Î∂à ÌÅ¨Í∏∞Ïóê ÎßûÏ∂îÏñ¥ ÎèôÍ∏∞Ìôî
            if (window.fireApp && window.fireApp.setGlowScale) {
                window.fireApp.setGlowScale(value);
            }
            this.saveSettings();
        });

        this.setupSlider('magnitude', (value) => {
            this.fire.material.uniforms.magnitude.value = value;
            this.currentValues.magnitude = value;
            this.saveSettings();
        });

        this.setupSlider('lacunarity', (value) => {
            this.fire.material.uniforms.lacunarity.value = value;
            this.currentValues.lacunarity = value;
            this.saveSettings();
        });

        this.setupSlider('gain', (value) => {
            this.fire.material.uniforms.gain.value = value;
            this.currentValues.gain = value;
            this.saveSettings();
        });

        this.setupSlider('baseWidth', (value) => {
            this.fire.material.uniforms.baseWidth.value = value;
            this.currentValues.baseWidth = value;
            this.saveSettings();
        });

        // ÎÖ∏Ïù¥Ï¶à Ïä§ÏºÄÏùº Ïª®Ìä∏Î°§
        this.setupSlider('noiseScaleX', (value) => {
            this.fire.material.uniforms.noiseScale.value.x = value;
            this.currentValues.noiseScaleX = value;
            this.saveSettings();
        });

        this.setupSlider('noiseScaleY', (value) => {
            this.fire.material.uniforms.noiseScale.value.y = value;
            this.currentValues.noiseScaleY = value;
            this.saveSettings();
        });

        this.setupSlider('noiseScaleZ', (value) => {
            this.fire.material.uniforms.noiseScale.value.z = value;
            this.currentValues.noiseScaleZ = value;
            this.saveSettings();
        });

        // ÏÉâÏÉÅ Ïª®Ìä∏Î°§
        const updateColor = () => {
            const r = this.currentValues.colorR / 255;
            const g = this.currentValues.colorG / 255;
            const b = this.currentValues.colorB / 255;
            this.fire.material.uniforms.color.value.setRGB(r, g, b);
            this.saveSettings();
        };

        this.setupSlider('colorR', (value) => {
            this.currentValues.colorR = value;
            updateColor();
        });

        this.setupSlider('colorG', (value) => {
            this.currentValues.colorG = value;
            updateColor();
        });

        this.setupSlider('colorB', (value) => {
            this.currentValues.colorB = value;
            updateColor();
        });

        // Ïπ¥Î©îÎùº FOV Ï†ÅÏö©
        if (window.fireApp && window.fireApp.camera) {
            const baseFOV = 75;
            const newFOV = baseFOV / this.currentValues.scale;
            window.fireApp.camera.fov = newFOV;
            window.fireApp.camera.updateProjectionMatrix();
        }

        // Ïπ¥Ìà∞ Ïä§ÌÉÄÏùº Ïª®Ìä∏Î°§
        this.setupSlider('toonSteps', (value) => {
            console.log('toonSteps changed to:', value);
            if (this.fire && this.fire.material && this.fire.material.uniforms.toonSteps) {
                this.fire.material.uniforms.toonSteps.value = value;
                console.log('toonSteps uniform updated:', this.fire.material.uniforms.toonSteps.value);
            } else {
                console.warn('Fire object or toonSteps uniform not found');
            }
            this.currentValues.toonSteps = value;
            this.saveSettings();
        });

        this.setupSlider('toonBrightness', (value) => {
            console.log('toonBrightness changed to:', value);
            if (this.fire && this.fire.material && this.fire.material.uniforms.toonBrightness) {
                this.fire.material.uniforms.toonBrightness.value = value;
                console.log('toonBrightness uniform updated:', this.fire.material.uniforms.toonBrightness.value);
            } else {
                console.warn('Fire object or toonBrightness uniform not found');
            }
            this.currentValues.toonBrightness = value;
            this.saveSettings();
        });

        this.setupSlider('opacity', (value) => {
            console.log('opacity changed to:', value);
            if (this.fire && this.fire.material && this.fire.material.uniforms.opacity) {
                this.fire.material.uniforms.opacity.value = value;
                console.log('opacity uniform updated:', this.fire.material.uniforms.opacity.value);
            } else {
                console.warn('Fire object or opacity uniform not found');
            }
            this.currentValues.opacity = value;
            this.saveSettings();
        });

        // ÏÇ¨Ïö¥Îìú Î≥ºÎ•® Ïª®Ìä∏Î°§
        this.setupSlider('soundVolume', (value) => {
            // FireAppÏùò Î≥ºÎ•® ÏÑ§Ï†ï Ï†ÅÏö©
            if (window.fireApp && window.fireApp.setVolume) {
                window.fireApp.setVolume(value);
            }
            this.currentValues.soundVolume = value;
            this.saveSettings();
        });

        // ÏÇ¨Ïö¥Îìú ÏºúÍ∏∞/ÎÅÑÍ∏∞ ÌÜ†Í∏Ä
        this.setupToggle('soundEnabled', (enabled) => {
            // FireAppÏùò ÌÜ†Í∏ÄÎÆ§Ìä∏Î•º Ìò∏Ï∂úÌïòÏó¨ ÏùåÏÜåÍ±∞ ÏÉÅÌÉú Î≥ÄÍ≤Ω
            if (window.fireApp && typeof window.fireApp.toggleMute === 'function') {
                window.fireApp.toggleMute();
            }
            this.currentValues.soundEnabled = enabled;
            this.saveSettings();
        });

        this.setupToggle('embersEnabled', (enabled) => {
            if (window.fireApp) {
                if (enabled && window.fireApp.isFireLit) {
                    window.fireApp.createEmbers();
                } else if (!enabled && window.fireApp.embers) {
                    window.fireApp.embers.sprites.forEach(sprite => window.fireApp.fireGroup.remove(sprite));
                    window.fireApp.embers = null;
                }
            }
            this.currentValues.embersEnabled = enabled;
            this.saveSettings();
        });

        this.setupToggle('smokeEnabled', (enabled) => {
            if (window.fireApp) {
                if (enabled && window.fireApp.isFireLit) {
                    window.fireApp.createSmoke();
                } else if (!enabled && window.fireApp.smoke) {
                    window.fireApp.smoke.sprites.forEach(sprite => window.fireApp.fireGroup.remove(sprite));
                    window.fireApp.smoke = null;
                }
            }
            this.currentValues.smokeEnabled = enabled;
            this.saveSettings();
        });

        this.setupToggle('glowEnabled', (enabled) => {
            if (window.fireApp && window.fireApp.toggleGlow) {
                window.fireApp.toggleGlow(enabled);
            }
            this.currentValues.glowEnabled = enabled;
            this.saveSettings();
        });

        this.setupSlider('smokeIntensity', (value) => {
            if (window.fireApp && window.fireApp.setSmokeIntensity) {
                window.fireApp.setSmokeIntensity(value);
            }
            this.currentValues.smokeIntensity = value;
            this.saveSettings();
        });

        // ÎπõÎ¨¥Î¶¨ Î≤îÏúÑ Ï°∞Ï†à
        this.setupSlider('glowRange', (value) => {
            this.currentValues.glowRange = value;
            if (window.fireApp && window.fireApp.setGlowRange) {
                window.fireApp.setGlowRange(value);
            }
            this.saveSettings();
        });

        // ÎπõÎ¨¥Î¶¨ Î∞ùÍ∏∞ Ï°∞Ï†à
        this.setupSlider('glowAlpha', (value) => {
            this.currentValues.glowAlpha = value;
            if (window.fireApp && window.fireApp.setGlowAlpha) {
                window.fireApp.setGlowAlpha(value);
            }
            this.saveSettings();
        });
    }

    setupSlider(id, callback) {
        const slider = document.getElementById(id);
        const valueSpan = document.getElementById(id + '-value');
        
        if (!slider || !valueSpan) {
            console.warn(`Slider or value span not found for id: ${id}`);
            return;
        }
        
        slider.addEventListener('input', () => {
            const value = parseFloat(slider.value);
            
            // ÌëúÏãúÍ∞í ÏóÖÎç∞Ïù¥Ìä∏ (Ï†ïÎ∞ÄÎèÑ Í≥†Î†§)
            if (slider.step && parseFloat(slider.step) >= 1) {
                // stepÏù¥ 1 Ïù¥ÏÉÅÏù¥Î©¥ Ï†ïÏàòÎ°ú ÌëúÏãú
                valueSpan.textContent = value.toFixed(0);
            } else {
                // ÏÜåÏàòÏ†ê 2ÏûêÎ¶¨Î°ú ÌëúÏãú
                valueSpan.textContent = value.toFixed(2);
            }
            
            // ÏΩúÎ∞± Ïã§Ìñâ
            callback(value);
        });
        
        // Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï ÌôïÏù∏
        const initialValue = parseFloat(slider.value);
        if (slider.step && parseFloat(slider.step) >= 1) {
            valueSpan.textContent = initialValue.toFixed(0);
        } else {
            valueSpan.textContent = initialValue.toFixed(2);
        }
    }

    setupToggle(id, callback) {
        const toggle = document.getElementById(id);
        if (!toggle) {
            console.warn(`Toggle not found for id: ${id}`);
            return;
        }
        
        toggle.addEventListener('change', () => {
            const enabled = toggle.checked;
            callback(enabled);
        });
    }

    toggleSidebar() {
        const sidebar = document.getElementById('settingsSidebar');
        if (sidebar.style.right === '0px') {
            this.closeSidebar();
        } else {
            this.openSidebar();
        }
    }

    openSidebar() {
        const sidebar = document.getElementById('settingsSidebar');
        sidebar.style.right = '0px';
    }

    closeSidebar() {
        const sidebar = document.getElementById('settingsSidebar');
        sidebar.style.right = '-350px';
    }

    setFire(fire) {
        this.fire = fire;
        console.log('Fire object set, available uniforms:', Object.keys(this.fire.material.uniforms));
        console.log('toonSteps uniform exists:', !!this.fire.material.uniforms.toonSteps);
        console.log('toonBrightness uniform exists:', !!this.fire.material.uniforms.toonBrightness);
        this.setupControls();
        this.applyCurrentValues();
        
        // UI ÎèôÍ∏∞Ìôî ÌôïÏã§Ìûà ÌïòÍ∏∞
        setTimeout(() => {
            this.updateAllDisplayValues();
        }, 100);
    }

    applyCurrentValues() {
        if (!this.fire) return;

        // Ïπ¥Î©îÎùº FOV Ï†ÅÏö©
        if (window.fireApp && window.fireApp.camera) {
            const baseFOV = 75;
            const newFOV = baseFOV / this.currentValues.scale;
            window.fireApp.camera.fov = newFOV;
            window.fireApp.camera.updateProjectionMatrix();
        }
        
        // Î∂àÍΩÉ ÌÅ¨Í∏∞ Ï†ÅÏö©
        this.fire.scale.set(
            this.currentValues.fireScale,
            this.currentValues.fireScale,
            this.currentValues.fireScale
        );
        
        // Ï∫îÎ≤ÑÏä§ ÏúÑÏπò Ï†ÅÏö©
        this.updateCanvasPosition();
        
        this.fire.material.uniforms.magnitude.value = this.currentValues.magnitude;
        this.fire.material.uniforms.lacunarity.value = this.currentValues.lacunarity;
        this.fire.material.uniforms.gain.value = this.currentValues.gain;
        this.fire.material.uniforms.baseWidth.value = this.currentValues.baseWidth;
        
        this.fire.material.uniforms.noiseScale.value.set(
            this.currentValues.noiseScaleX,
            this.currentValues.noiseScaleY,
            this.currentValues.noiseScaleZ,
            this.currentValues.animationSpeed
        );
        
        this.fire.material.uniforms.color.value.setRGB(
            this.currentValues.colorR / 255,
            this.currentValues.colorG / 255,
            this.currentValues.colorB / 255
        );

        // Ïπ¥Ìà∞ Ïä§ÌÉÄÏùº ÏÑ§Ï†ï Ï†ÅÏö©
        if (this.fire.material.uniforms.toonSteps) {
            this.fire.material.uniforms.toonSteps.value = this.currentValues.toonSteps;
            console.log('Initial toonSteps applied:', this.currentValues.toonSteps);
        }
        if (this.fire.material.uniforms.toonBrightness) {
            this.fire.material.uniforms.toonBrightness.value = this.currentValues.toonBrightness;
            console.log('Initial toonBrightness applied:', this.currentValues.toonBrightness);
        }
        if (this.fire.material.uniforms.opacity) {
            // Î∂àÏù¥ Í∫ºÏ†∏ÏûàÏúºÎ©¥ opacityÎ•º 0ÏúºÎ°ú Ïú†ÏßÄ
            if (window.fireApp && !window.fireApp.isFireLit) {
                this.fire.material.uniforms.opacity.value = 0.0;
                console.log('Fire is off, opacity kept at 0');
            } else {
                this.fire.material.uniforms.opacity.value = this.currentValues.opacity;
                console.log('Initial opacity applied:', this.currentValues.opacity);
            }
        }

        // UI ÏóÖÎç∞Ïù¥Ìä∏
        this.updateAllDisplayValues();
        
        // Î∞§ÌïòÎäò Ï¥àÍ∏∞ ÏÉÅÌÉú Ï†ÅÏö©
        if (window.fireApp && window.fireApp.toggleNightSky) {
            window.fireApp.toggleNightSky(this.currentValues.nightSky);
        }
        
        // Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ Ï¥àÍ∏∞ ÏÉÅÌÉú Ï†ÅÏö©
        if (window.fireApp && window.fireApp.toggleBackgroundImage) {
            window.fireApp.toggleBackgroundImage(this.currentValues.backgroundImage);
        }
        
        // ÏÜåÌíà Ïù¥ÎØ∏ÏßÄ Î†àÏù¥Ïñ¥ Ï¥àÍ∏∞ ÏÉÅÌÉú Ï†ÅÏö©
        if (window.fireApp && window.fireApp.toggleImageLayer) {
            window.fireApp.toggleImageLayer(this.currentValues.imageLayer);
        }
        
        // ÎπõÎ¨¥Î¶¨ Ï¥àÍ∏∞ ÏÉÅÌÉú Ï†ÅÏö©
        if (window.fireApp && window.fireApp.toggleGlow) {
            window.fireApp.toggleGlow(this.currentValues.glowEnabled);
        }
        
        // Glow ÌÅ¨Í∏∞ Ï¥àÍ∏∞ Ï†ÅÏö© (Î™®Îã•Î∂à ÌÅ¨Í∏∞ Í∏∞Ï§Ä)
        if (window.fireApp && window.fireApp.setGlowScale) {
            window.fireApp.setGlowScale(this.currentValues.fireScale);
        }
        
        // Glow Î≤îÏúÑ Ï¥àÍ∏∞ Ï†ÅÏö©
        if (window.fireApp && window.fireApp.setGlowRange) {
            window.fireApp.setGlowRange(this.currentValues.glowRange);
        }
        
        // Glow Î∞ùÍ∏∞ Ï¥àÍ∏∞ Ï†ÅÏö©
        if (window.fireApp && window.fireApp.setGlowAlpha) {
            window.fireApp.setGlowAlpha(this.currentValues.glowAlpha);
        }
        
        // Ïó∞Í∏∞ Í∞ïÎèÑ Ï¥àÍ∏∞ Ï†ÅÏö©
        if (window.fireApp && window.fireApp.setSmokeIntensity) {
            window.fireApp.setSmokeIntensity(this.currentValues.smokeIntensity);
        }
        
        // ÏÇ¨Ïö¥Îìú ÏÑ§Ï†ï Ï¥àÍ∏∞ ÏÉÅÌÉú Ï†ÅÏö©
        if (window.fireApp) {
            if (window.fireApp.setVolume) {
                window.fireApp.setVolume(this.currentValues.soundVolume);
            }
            window.fireApp.isMuted = !this.currentValues.soundEnabled;
        }
    }

    resetToDefaults() {
        this.currentValues = { ...this.defaultValues };
        
        // Ïä¨ÎùºÏù¥Îçî Í∞íÎì§ÏùÑ Í∏∞Î≥∏Í∞íÏúºÎ°ú Î¶¨ÏÖã
        Object.keys(this.defaultValues).forEach(key => {
            const slider = document.getElementById(key);
            if (slider) {
                slider.value = this.defaultValues[key];
            }
        });

        // Ïã§Ï†ú Í∞íÎì§ Ï†ÅÏö©
        this.applyCurrentValues();
        this.saveSettings();
    }

    updateAllDisplayValues() {
        Object.keys(this.currentValues).forEach(key => {
            const value = this.currentValues[key];
            const slider = document.getElementById(key);
            const valueSpan = document.getElementById(key + '-value');
            
            // Ïä¨ÎùºÏù¥Îçî Í∞í ÏóÖÎç∞Ïù¥Ìä∏ Î∞è ÌëúÏãúÍ∞í ÏóÖÎç∞Ïù¥Ìä∏
            if (slider && slider.type === 'range') {
                if (key === 'positionY') {
                    // slider Î≤îÏúÑ [-300,300], slider.value = actual + 300
                    const sliderVal = value + 300;
                    slider.value = sliderVal;
                    if (valueSpan) {
                        valueSpan.textContent = sliderVal.toFixed(0);
                    }
                } else {
                    slider.value = value;
                    if (valueSpan) {
                        if (typeof value === 'number') {
                            // Ï†ïÏàò stepÏù∏ÏßÄ ÌôïÏù∏ÌïòÏó¨ ÌëúÏãú ÌòïÏãù Í≤∞Ï†ï
                            if (slider.step && parseFloat(slider.step) >= 1) {
                                valueSpan.textContent = value.toFixed(0);
                            } else {
                                valueSpan.textContent = value.toFixed(2);
                            }
                        } else {
                            valueSpan.textContent = value;
                        }
                    }
                }
            } else if (valueSpan) {
                // Ïä¨ÎùºÏù¥ÎçîÍ∞Ä ÏóÜÍ±∞ÎÇò Îã§Î•∏ ÌÉÄÏûÖÏù∏ Í≤ΩÏö∞ Í∏∞Î≥∏ ÌëúÏãú
                if (typeof value === 'number') {
                    valueSpan.textContent = value.toFixed(2);
                } else {
                    valueSpan.textContent = value;
                }
            }
            
            // ÌÜ†Í∏Ä ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            const toggle = document.getElementById(key);
            if (toggle && toggle.type === 'checkbox') {
                toggle.checked = value;
            }
        });
        
        console.log('üîÑ UI Í∞í ÎèôÍ∏∞Ìôî ÏôÑÎ£å');
    }

    getRotationSpeed() {
        return this.rotationSpeed;
    }

    // Ïª®Ìä∏Î°§ Ìå®ÎÑê Ïà®Í∏∞Í∏∞/Î≥¥Ïù¥Í∏∞ (ÌïòÏúÑ Ìò∏ÌôòÏÑ±)
    toggleControls() {
        this.toggleSidebar();
    }

    updateCanvasPosition(x = null, y = null) {
        // ÌååÎùºÎØ∏ÌÑ∞Í∞Ä Ï£ºÏñ¥ÏßÄÎ©¥ ÏÇ¨Ïö©ÌïòÍ≥†, ÏïÑÎãàÎ©¥ currentValues ÏÇ¨Ïö©
        const sliderX = x !== null ? x : this.currentValues.positionX;
        const sliderY = y !== null ? y : this.currentValues.positionY;

        // Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ Í∏∞Î∞òÏùò Í∏∞Î≥∏ Ïò§ÌîÑÏÖã Í∞ÄÏ†∏Ïò§Í∏∞
        let baseOffsetX = 0;
        let baseOffsetY = 0;
        if (window.fireApp && window.fireApp.bgImageFireOffset) {
            baseOffsetX = window.fireApp.bgImageFireOffset.x;
            baseOffsetY = window.fireApp.bgImageFireOffset.y;
        }

        // Ï†ÑÏó≠ Ìå®Îãù Ïò§ÌîÑÏÖã Í∞ÄÏ†∏Ïò§Í∏∞
        let panOffsetX = 0;
        let panOffsetY = 0;
        if (window.fireApp && window.fireApp.panOffset) {
            panOffsetX = window.fireApp.panOffset.x;
            panOffsetY = window.fireApp.panOffset.y;
        }
        
        // ÏµúÏ¢Ö Ïò§ÌîÑÏÖã Í≥ÑÏÇ∞ = Í∏∞Î≥∏ Ïò§ÌîÑÏÖã + (Ïä¨ÎùºÏù¥Îçî Î≥ÄÌôòÍ∞í) + Ìå®Îãù Ïò§ÌîÑÏÖã
        const finalX = baseOffsetX + sliderX + panOffsetX;
        const finalY = baseOffsetY + sliderY + panOffsetY;

        // CSS transformÏúºÎ°ú Ï†ÑÏ≤¥ Ï∫îÎ≤ÑÏä§ Ïù¥Îèô
        if (window.fireApp && window.fireApp.renderer && window.fireApp.renderer.domElement) {
            const canvas = window.fireApp.renderer.domElement;
            const transformString = `translate(${finalX}px, ${finalY}px)`;
            canvas.style.transform = transformString;
            
            // Glow Ï∫îÎ≤ÑÏä§ÎèÑ ÎèôÏùºÌïòÍ≤å Ïù¥Îèô
            if (window.fireApp.glowCanvas) {
                window.fireApp.glowCanvas.style.transform = transformString;
            }
        }
    }

    handleResize() {
        const sidebar = document.getElementById('settingsSidebar');
        if (!sidebar) return;
        
        // ÏÇ¨Ïù¥ÎìúÎ∞îÍ∞Ä Ïó¥Î†§ÏûàÏúºÎ©¥ Îã´Í∏∞
        if (sidebar.style.right === '0px') {
            this.closeSidebar();
        }
    }

    wrapSlidersWithContainers() {
        const sliders = document.querySelectorAll('#settingsSidebar .modern-slider');
        sliders.forEach(slider => {
            const parent = slider.parentElement;
            const valueDisplay = parent.querySelector('.value-display');
            
            // Ïù¥ÎØ∏ containerÎ°ú Í∞êÏã∏Ï†∏ ÏûàÏúºÎ©¥ Ïä§ÌÇµ
            if (parent.classList.contains('slider-container')) return;
            
            // ÏÉà container ÏÉùÏÑ±
            const container = document.createElement('div');
            container.className = 'slider-container';
            
            // Ïä¨ÎùºÏù¥ÎçîÏôÄ Í∞í ÌëúÏãúÎ•º containerÏóê Ïù¥Îèô
            parent.insertBefore(container, slider);
            container.appendChild(slider);
            if (valueDisplay) {
                container.appendChild(valueDisplay);
            }
        });
    }

    // ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌïú Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ ÏÉÅÌÉú ÌôïÏù∏ Î©îÏÑúÎìú
    debugLocalStorage() {
        console.log('üîç === Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ ÎîîÎ≤ÑÍπÖ ===');
        console.log('ÌòÑÏû¨ ÏÑ§Ï†ï Í∞í:', this.currentValues);
        console.log('Í∏∞Î≥∏ ÏÑ§Ï†ï Í∞í:', this.defaultValues);
        console.log('Ï†ÄÏû•Îêú Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ Îç∞Ïù¥ÌÑ∞:', localStorage.getItem('fireSettings'));
        
        try {
            const saved = localStorage.getItem('fireSettings');
            if (saved) {
                console.log('ÌååÏã±Îêú Ï†ÄÏû• Îç∞Ïù¥ÌÑ∞:', JSON.parse(saved));
            }
        } catch (e) {
            console.log('ÌååÏã± Ïò§Î•ò:', e);
        }
        
        // ÌÖåÏä§Ìä∏ Ï†ÄÏû•
        console.log('ÌÖåÏä§Ìä∏ Ï†ÄÏû• Ïã§Ìñâ...');
        this.saveSettings();
        
        console.log('=========================');
    }

    // Í∞ïÏ†úÎ°ú ÏÑ§Ï†ï Ï†ÄÏû• ÌÖåÏä§Ìä∏
    testSave() {
        const testSettings = { ...this.currentValues, scale: Math.random() };
        console.log('ÌÖåÏä§Ìä∏ ÏÑ§Ï†ï Ï†ÄÏû•:', testSettings);
        localStorage.setItem('fireSettings', JSON.stringify(testSettings));
        console.log('Ï†ÄÏû• ÌõÑ ÌôïÏù∏:', localStorage.getItem('fireSettings'));
    }

    // Í∞ïÏ†ú UI ÎèôÍ∏∞Ìôî (ÎîîÎ≤ÑÍπÖÏö©)
    forceSyncUI() {
        console.log('üîß Í∞ïÏ†ú UI ÎèôÍ∏∞Ìôî ÏãúÏûë...');
        this.updateAllDisplayValues();
        
        // Í∞Å Ïä¨ÎùºÏù¥ÎçîÏùò Ïã§Ï†ú Í∞íÍ≥º currentValues ÎπÑÍµê
        Object.keys(this.currentValues).forEach(key => {
            const slider = document.getElementById(key);
            const valueSpan = document.getElementById(key + '-value');
            const currentValue = this.currentValues[key];
            
            if (slider && slider.type === 'range') {
                const sliderValue = parseFloat(slider.value);
                if (Math.abs(sliderValue - currentValue) > 0.001) {
                    console.warn(`‚ö†Ô∏è Î∂àÏùºÏπò Î∞úÍ≤¨: ${key} - Ïä¨ÎùºÏù¥Îçî: ${sliderValue}, Ï†ÄÏû•Í∞í: ${currentValue}`);
                    slider.value = currentValue; // Í∞ïÏ†ú ÏàòÏ†ï
                }
            }
            
            if (valueSpan && typeof currentValue === 'number') {
                const displayValue = parseFloat(valueSpan.textContent);
                if (Math.abs(displayValue - currentValue) > 0.001) {
                    console.warn(`‚ö†Ô∏è ÌëúÏãúÍ∞í Î∂àÏùºÏπò: ${key} - ÌëúÏãú: ${displayValue}, Ï†ÄÏû•Í∞í: ${currentValue}`);
                    valueSpan.textContent = currentValue.toFixed(2); // Í∞ïÏ†ú ÏàòÏ†ï
                }
            }
        });
        
        console.log('‚úÖ Í∞ïÏ†ú UI ÎèôÍ∏∞Ìôî ÏôÑÎ£å');
    }
}

export default FireControls; 